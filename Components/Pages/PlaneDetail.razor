@page "/planes/detail"
@rendermode InteractiveServer
@using InterviewProject.Data
@using InterviewProject.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IDbContextFactory<InterviewProject.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<h1>Plane details</h1>

<h2 class="mt-3">Update plane</h2>
<EditForm method="post" EditContext="editContext" OnValidSubmit="UpdatePlane" FormName="update" Enhance>
    <DataAnnotationsValidator />
    <input type="hidden" name="Plane.Id" value="@Plane.Id" />
    <div class="row">
        <div class="col-6">
            <label for="id-num">Identification Number</label>
            <ValidationMessage For="() => Plane.IdentificationNumber" class="text-danger" />
            <InputNumber @bind-Value="Plane.IdentificationNumber" id="id-num" placeholder="Plane Identification Number" class="form-control" />
        </div>
        <div class="col-6">
            <label for="max-weight">Max Weight (kg)</label>
            <ValidationMessage For="() => Plane.MaxWeight" class="text-danger" />
            <InputNumber @bind-Value="Plane.MaxWeight" id="max-weight" placeholder="Max Weight" class="form-control" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Update</button>
</EditForm>

<h2 class="mt-3">Package list</h2>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th scope="col">Description</th>
            <th scope="col">Weight</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var package in Plane.Packages)
        {
            <tr>
                <td>@package.Description</td>
                <td>@package.Weight</td>
                <td>
                    <button @onclick="() => RemoveFromPlane(package)" class="btn btn-danger">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    
    [SupplyParameterFromForm]
    private Plane Plane { get; set; } = new();
    private AppDbContext context = default!;

    private ValidationMessageStore? messageStore;
    private EditContext? editContext;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        var p = context.Planes.Include(p => p.Packages).FirstOrDefault(p => p.Id == Id);

        // redirect to planes list if plane not found
        if(p == null)
            NavigationManager.NavigateTo("/planes");
        else
            Plane = p;

        editContext = new(Plane);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        System.Console.WriteLine("Validate");
        IEnumerable<Package> packages = context.Packages.Where(p => p.Plane == Plane);
        if (Plane.MaxWeight < packages.Sum(p => p.Weight))
        {
            messageStore?.Add(() => Plane.MaxWeight, "Max weight cannot be lower than current total weight");
        }
    }

    private async Task UpdatePlane()
    {
        context.Update(Plane);
        await context.SaveChangesAsync();
        this.StateHasChanged();
    }

    private async Task RemoveFromPlane(Package package)
    {
        if(package.Plane != null && package.Plane.Id == Plane.Id)
        {
            package.Plane = null;
            context.Update(package);
            await context.SaveChangesAsync();
        }
        this.StateHasChanged();
    }
}